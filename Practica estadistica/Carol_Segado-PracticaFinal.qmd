---
format: html
editor: visual
---

```{r}
library(ggplot2)
```

Cargar los datos en un dataframe llamado: airbnb

```{r}
airbnb<-read.csv('data//airbnb.csv',sep = ',', stringsAsFactors = T)
```

Mostrar las primeras 6 filas del dataframe

```{r}
head(airbnb,6)
```

Renombrar las columnas de la siguiente forma:

| Nombre original        | Nuevo nombre   |
|------------------------|----------------|
| Zipcode                | CodigoPostal   |
| Neighbourhood.Cleansed | Barrio         |
| Property.Type          | TipoPropiedad  |
| Room.Type              | TipoAlquiler   |
| Accommodates           | MaxOcupantes   |
| Bathrooms              | NumBanyos      |
| Bedrooms               | NumDormitorios |
| Beds                   | NumCamas       |
| Bed.Type               | TipoCama       |
| Amenities              | Comodidades    |
| Square.Feet            | PiesCuadrados  |
| Price                  | Precio         |
| Review.Scores.Rating   | Puntuacion     |

```{r}
newnames<-c("CodigoPostal","Barrio","TipoPropiedad","TipoAlquiler","MaxOcupantes","NumBanyos",
"NumDormitorios","NumCamas","TipoCama","Comodidades","PiesCuadrados","Precio","Puntuacion")

```

```{r}
colnames(airbnb) <- newnames
```

```{r}
head(airbnb)
```

1.  Crea una nueva columna llamada MetrosCuadrados a partir de la columna PiesCuadrados.

Ayuda: 1 pie cuadrado son 0,092903 metros cuadrdados

```{r}
airbnb$MetrosCuadrados <- airbnb$PiesCuadrados * 0.092903


```

------------------------------------------------------------------------

2.  Miremos el código postal. Es una variable con entradas erroneas. Hay valores como '','-' y '28' que deberían ser considerados como NA. Así mismo también debería ser NA todos los que no compiencen por 28, ya que estamos con códigos postales de Madrid

El código postal 28002, 28004 y 28051 tienen entradas repetidas. Por ejemplo las entradas 28002\n20882 deberían ir dnetro de 28002

El codigo 2804 debería ser 28004, 2805 deberia ser 28005 y 2815 juncto con 2815 debería ser 28015

Limpia los datos de la columna Codigo Postal

```{r}

airbnb$CodigoPostal <- as.character(airbnb$CodigoPostal)
airbnb$CodigoPostal <- trimws(airbnb$CodigoPostal)
airbnb$CodigoPostal[airbnb$CodigoPostal == '' | airbnb$CodigoPostal == '-' | !startsWith(airbnb$CodigoPostal, "28") | airbnb$CodigoPostal == '28'] <- NA
airbnb$CodigoPostal <- gsub('^2804$', '28004', airbnb$CodigoPostal)
airbnb$CodigoPostal <- gsub('^2805$', '28005', airbnb$CodigoPostal)
airbnb$CodigoPostal <- gsub('^2815$', '28015', airbnb$CodigoPostal)
airbnb$CodigoPostal <- gsub('^2815$', '28015', airbnb$CodigoPostal)
airbnb$CodigoPostal <- gsub('^280013$', '28013', airbnb$CodigoPostal)
airbnb$CodigoPostal <- sapply(strsplit(airbnb$CodigoPostal, '\n'), function(x) x[1])


head(airbnb)


```

------------------------------------------------------------------------

3.  Una vez limpios los datos ¿Cuales son los códigos postales que tenemos?

```{r}
frecuencias <- table(airbnb$CodigoPostal )
resultados <- data.frame(CodigoPostal = names(frecuencias))
cat("Frecuencia de códigos postales: \n")
print(resultados)


```

------------------------------------------------------------------------

4.  ¿Cuales son los 5 códigos postales con más entradas? ¿Y con menos? ¿Cuantas entradas tienen?

```{r}
frecuencia <- table(airbnb$CodigoPostal )
resultados <- data.frame(CodigoPostal = names(frecuencia), Frecuencia = as.numeric(frecuencia))
resultados <- resultados[order(resultados$Frecuencia, decreasing = TRUE), ]
cat("Cinco códigos postales con más entradas: \n")
print(head(resultados, 5))
```

```{r}
resultados <- data.frame(CodigoPostal = names(frecuencia), Frecuencia = as.numeric(frecuencia))
resultados <- resultados[order(resultados$Frecuencia, decreasing = FALSE), ]
cat("Cinco códigos postales con menos entradas: \n")
print(head(resultados, 5))

```

------------------------------------------------------------------------

5.  ¿Cuales son los barrios que hay en el código postal 28012?

```{r}

barrios_28012 <- airbnb$Barrio[airbnb$CodigoPostal == '28012']
barrios_unicos_28012 <- factor(unique(barrios_28012))
cat("Barrios del CP 28012: \n")
cat(paste(barrios_unicos_28012,collapse="\n"))
#print(barrios_unicos_28012)

```

------------------------------------------------------------------------

6.  ¿Cuantas entradas hay en cada uno de esos barrios para el codigo postal 28012?

```{r}

cod_28012 <-sort(table(droplevels(airbnb$Barrio[airbnb$CodigoPostal == '28012'])),decreasing = TRUE)

resultados <- data.frame(Barrio = names(cod_28012), Frecuencia = as.numeric(cod_28012))
cat("Entras para los barrios del CP 28012: \n")

print(resultados)

```

------------------------------------------------------------------------

7.  ¿Cuantos barrios hay en todo el dataset airbnb? ¿Cuales son?

```{r}
barrios_unicos <- sort(unique(airbnb$Barrio),decresing=TRUE)
cantidad_barrios <- length(barrios_unicos)
cat("Cantidad de barrios en el dataset airbnb:", cantidad_barrios, "\n\n")
cat("Lista de barrios:\n")
print(barrios_unicos)

```

------------------------------------------------------------------------

8.  ¿Cuales son los 5 barrios que tienen mayor número entradas?

```{r}
frecuencia_Barrios <- table(airbnb$Barrio[airbnb$Barrio != 'NA'] )
orden_mayor_menor <- sort(frecuencia_Barrios, decreasing = TRUE)
top_5_barrios <- head(orden_mayor_menor, 5)
cat("Cinco códigos Barrios con más entradas: \n")
print(top_5_barrios)

```

------------------------------------------------------------------------

9.  ¿Cuantos Tipos de Alquiler diferentes hay? ¿Cuales son? ¿Cuantas entradas en el dataframe hay por cada tipo?

Muestra el diagrama de cajas del precio para cada uno de los diferentes Tipos de Alquiler

```{r}
tipos_alquiler <- unique(airbnb$TipoAlquiler)
entradas_por_tipo <- table(airbnb$TipoAlquiler)

cat("Tipos de Alquiler:\n\n")
cat(paste(tipos_alquiler,collapse="\n"))
cat("\n\nCantidad de entradas por tipo de alquiler:\n")
print(entradas_por_tipo)
```

```{r}
library(ggplot2)



ggplot(data=airbnb, aes(x = TipoAlquiler, y = Precio, color= TipoAlquiler)) +
  geom_boxplot()+labs(title = "Diagramas de Cajas del Precio por Tipo de Alquiler",
       x = "Tipo de Alquiler",
       y = "Precio")


```

------------------------------------------------------------------------

10. Cual es el precio medio de alquiler de cada uno, la diferencia que hay ¿es estadísticamente significativa? ¿Con que test lo comprobarías?

```{r}

precio_medio_por_tipo <- tapply(airbnb$Precio, airbnb$TipoAlquiler, function(x) mean(x, na.rm = TRUE))
cat("Precio medio para cada Tipo de Alquiler:\n")
for (tipo in names(precio_medio_por_tipo)) {
  cat(paste("Tipo:", tipo, "- Precio medio:", precio_medio_por_tipo[tipo]), "\n")
}
```

Primero compruebo la distribucion con un test shapiro y lo que vemos es que el P valor es muy cercano a 0 por lo que descartamos la hipótesis nula, es decir que hay una evidencia significativa de que no es una distribución normal.

```{r}
resultados_shapiro <- list()
tipos_alquiler <- unique(airbnb$TipoAlquiler)
tamano <- 5000

for (tipo in tipos_alquiler) {
  subset_data <- airbnb$Precio[airbnb$TipoAlquiler == tipo]
  
  
  tamano_muestra <- min(tamano, length(subset_data))
  
  subset_data <- sample(subset_data, tamano_muestra)
  shapiro_test <- shapiro.test(subset_data)
  resultados_shapiro[[tipo]] <- shapiro_test
}

for (tipo in tipos_alquiler) {
  print(paste("Tipo de Alquiler:", tipo))
  print(resultados_shapiro[[tipo]])
}

```

Realizaremos en ese caso el test Kruskal para distribuciones no gausianas, el P valor 0 nos indica que hay diferencias significativas en al menos 2 grupos

```{r}
resultados_kruskal <- kruskal.test(Precio ~ TipoAlquiler, data = airbnb)
summary(resultados_kruskal)

cat("Estadístico de prueba:", resultados_kruskal$statistic, "\n")
cat("Parámetro:", resultados_kruskal$parameter, "\n")
cat("Valor p:", resultados_kruskal$p.value, "\n")
cat("Método:", resultados_kruskal$method, "\n")
cat("Nombre de los datos:", resultados_kruskal$data.name, "\n")

```

He buscado algún test similar al de tukey que se usa para ANOVA pero para distribuciones no normales, y he encontrado el dunn.test y según este resultado hay diferecias significativas en las medias entre los 3 grupos

```{r}
library(dunn.test)
comparaciones_dunn <- dunn.test(airbnb$Precio, g = airbnb$TipoAlquiler, method = "bonferroni")
print(comparaciones_dunn)
```

------------------------------------------------------------------------

11. Filtra el dataframe cuyos tipo de alquiler sea 'Entire home/apt' y guardalo en un dataframe llamado *airbnb_entire*. Estas serán las entradas que tienen un alquiler del piso completo.

```{r}
airbnb_entire <- airbnb[airbnb$TipoAlquiler == 'Entire home/apt',]

head(airbnb_entire)
```

------------------------------------------------------------------------

12. ¿Cuales son los 5 barrios que tienen un mayor número de apartamentos enteros en alquiler? Nota: Mirar solo en airbnb_entire. A partir de este punto y hasta que se diga lo contrario partiremos de airbnb_entire.

```{r}
frecuencia_apartamentos <- table(airbnb_entire$Barrio[airbnb_entire$TipoPropiedad == 'Apartment'] )
orden_mayor_menor <- sort(frecuencia_apartamentos, decreasing = TRUE)
top_5_barrios <- head(orden_mayor_menor, 5)
cat("Cinco códigos Barrios con más apartamentos enteros: \n")
print(top_5_barrios)
```

------------------------------------------------------------------------

13. ¿Cuales son los 5 barrios que tienen un mayor precio medio de alquiler para apartamentos enteros (es decir, del dataframe airbnb_entire)? ¿Cual es su precio medio?

Ayuda: Usa la función aggregate `aggregate(.~colname,df,mean,na.rm=TRUE)`

```{r}
Barrios_precio <- aggregate(Precio ~ Barrio, data = airbnb_entire, mean, na.rm = TRUE)
Barrios_precio_sort <-Barrios_precio[order(Barrios_precio$Precio, decreasing = TRUE), ]
top_5_barrios <- head(Barrios_precio_sort, 5)
cat("Cinco códigos Barrios con precio medio mas alto: \n")
print(top_5_barrios)
```

------------------------------------------------------------------------

14. ¿Cuantos apartamentos hay en cada uno de esos barrios?

Mostrar una dataframe con el nombre del barrio, el precio y el número de entradas.

Ayuda: Podeis crear un nuevo dataframe con las columnas "Barrio" y "Freq" que contenga el número de entradas en cada barrio y hacer un merge con el dataframe del punto anterior.

```{r}
num_entradas_por_barrio <- aggregate(Precio ~ Barrio, data = airbnb_entire, length)
names(num_entradas_por_barrio)[2] <- "Freq"
resultado <- merge(Barrios_precio, num_entradas_por_barrio, by = "Barrio")
resultado_ordenado <- resultado[order(resultado$Precio, decreasing = TRUE), ]
print(resultado_ordenado )

```

------------------------------------------------------------------------

15. Partiendo del dataframe anterior, muestra los 5 barrios con mayor precio, pero que tengan más de 100 entradas de alquiler.

```{r}
barrios_con_mas_100_entradas <- resultado_ordenado[resultado_ordenado$Freq > 100, ]
top_5_barrios_mas_100_entradas <- head(barrios_con_mas_100_entradas, 5)
print(top_5_barrios_mas_100_entradas)
```

------------------------------------------------------------------------

16. Dibuja el diagrama de densidad de distribución de los diferentes precios. Serían 5 gráficas, una por cada barrio.

```{r}
barrios <- top_5_barrios_mas_100_entradas$Barrio
airbnb_filtrado <- airbnb_entire[airbnb_entire$Barrio %in% barrios, ]
ggplot(airbnb_filtrado, aes(x = Precio, fill = Barrio)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~Barrio, scales = "free_y") +
  labs(title = "Densidad de Distribución de Precios por Barrio",
       x = "Precio",
       y = "Densidad") +
  theme_gray()
```

------------------------------------------------------------------------

17. Calcula el tamaño medio, en metros cuadrados, para los 5 barrios anteriores y muestralo en el mismo dataframe junto con el precio y número de entradas

```{r}
tamano_medio_por_barrio <- aggregate(MetrosCuadrados ~ Barrio, data = airbnb_entire, mean, na.rm = TRUE)
resultado <- merge(top_5_barrios_mas_100_entradas,tamano_medio_por_barrio, by = "Barrio")
resultado_ordenado <- resultado[order(resultado$Precio, decreasing = TRUE), ]
print(resultado_ordenado )

```

------------------------------------------------------------------------

18. Dibuja el diagrama de densidad de distribución de los diferentes tamaños de apartamentos. Serían 5 gráficas, una por cada barrio.

```{r}
barrios <- resultado_ordenado$Barrio
airbnb_filtrado <- airbnb_entire[airbnb_entire$Barrio %in% barrios, ]
ggplot(airbnb_filtrado, aes(x = MetrosCuadrados, fill = Barrio)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~Barrio, scales = "free_y") +
  labs(title = "Densidad de Distribución de Metros por Barrio",
       x = "Metros",
       y = "Densidad") +
  theme_minimal()
```

------------------------------------------------------------------------

19. Esta claro que las medias de metros cuadrados de cada uno de estos 5 barrios parecen ser diferentes, pero ¿son estadísticamente diferentes? ¿Que test habría que usar para comprobarlo?

Primero realizamos el test Shapiro y lo que vemos es que, en general, no hay evidencias de que sigan una distribución normal salvo en el caso del barrio de Goya

```{r}
resultados_shapiro <- list()
tipos_alquiler <- top_5_barrios_mas_100_entradas$Barrio
tamano <- 5000

for (barrio in barrios) {
  subset_data <- airbnb_entire$MetrosCuadrados[airbnb_entire$Barrio == barrio]
  
  
  tamano_muestra <- min(tamano, length(subset_data))
  
  subset_data <- sample(subset_data, tamano_muestra)
  shapiro_test <- shapiro.test(subset_data)
  resultados_shapiro[[barrio]] <- shapiro_test
}

for (barrio in barrios) {
  print(paste("Barrio:", barrio))
  print(resultados_shapiro[[barrio]])
}

```

```{r}
resultados_kruskal <- kruskal.test(Precio ~ MetrosCuadrados, data = airbnb)
summary(resultados_kruskal)

cat("Estadístico de prueba:", resultados_kruskal$statistic, "\n")
cat("Parámetro:", resultados_kruskal$parameter, "\n")
cat("Valor p:", resultados_kruskal$p.value, "\n")
cat("Método:", resultados_kruskal$method, "\n")
cat("Nombre de los datos:", resultados_kruskal$data.name, "\n")

```

Dado el P valor, cercano a 0, hay evidencias de que hay diferencias significativas en en los precios entre los grupos de metros cuadrados comparados, en este no voy a ejecutar el dunn.test porque saldrán demasiados grupos.

------------------------------------------------------------------------

Para únicamente los pisos de alquiler en el barrio de Sol:

`barrio_sol<-subset(airbnb_entire,Barrio=="Sol")`

Calcular un modelo lineal que combine alguna de estas variables: \* NumBanyos \* NumDormitorios \* MaxOcupantes \* MetrosCuadrados

20. Primero calculamos la correlación para ver como se relacionan estas variables entre sí.

```{r}
barrio_sol <- subset(airbnb_entire, Barrio == "Sol"  & !is.na(MetrosCuadrados))
variables <- barrio_sol[, c("NumBanyos", "NumDormitorios", "MaxOcupantes", "MetrosCuadrados")]
correlacion <- cor(variables,use="pairwise.complete.obs")

print(correlacion)
```

------------------------------------------------------------------------

21. Se observa que la correlación entre el número de dormitorios y los metros cuadrados es sorprendentemente baja. ¿Son de fiar esos números?

Mediante un histograma o curvas de densidad podemos descartar números que notienen sentido en el dataframe barrio_sol, para tener una matriz de correlación que tenga mayor sentido.

```{r}
library(tidyr)
variables_interes <- c("NumBanyos", "NumDormitorios", "MaxOcupantes", "MetrosCuadrados")
barrio_sol_long <- pivot_longer(barrio_sol, cols = variables_interes, names_to = "variable", values_to = "value")
ggplot(barrio_sol_long, aes(x = value, fill = variable)) +
  geom_histogram(position = "identity", alpha = 0.7, bins = 25) +
  geom_density(alpha = 0.2) +
  facet_wrap(~variable, scales = "free") +
  theme_minimal() +
  labs(title = "Histogramas y Curvas de Densidad de Variables en barrio_sol")

```

Viendo los histogramas de las variables vemos que tenemos valores a 0 en MetrosCuadrados y NumDormitorios deberíamos limpiar esto antes

```{r}
barrio_sol <- barrio_sol[barrio_sol$MetrosCuadrados > 0 & barrio_sol$NumDormitorios > 0, ]

```

------------------------------------------------------------------------

22. Una vez que hayamos filtrado los datos correspondientes calcular el valor o la combinación de valores que mejor nos permite obtener el precio de un inmueble.

¿Que variable es más fiable para conocer el precio de un inmueble, el número de habitaciones o los metros cuadrados?

Aplicamos un modelo de regresión lineal para verlo y según el p valor es mas fiable el número de habitaciones

```{r}
modelo <- lm(Precio ~ MaxOcupantes + NumBanyos + NumDormitorios + MetrosCuadrados, data = barrio_sol)
summary(modelo)


```

Según este resultado el precio minimo son 29.6212(Intercept) La variable más importante para predecir el precio sería el NumDormitorios, tiene el p valor menor a 0.05, esta marcada con 3\* y según indica el cambio estimado en el precio para un aumento del número de habitaciones sin modificar el resto de variables sería de 34.199€ (sin calcular margen de confianza) R-squared sugiere que hay un buen ajuste del modelo, según el R-cuadrado el 75.19% de la variabilidad del precio se explica por las variables del modelo. ------------------------------------------------------------------------

23. Responde con su correspondiente margen de error del 95%, ¿cuantos euros incrementa el precio del alquiler por cada metro cuadrado extra del piso?

```{r}
model <- lm(data=barrio_sol, formula= Precio ~ MetrosCuadrados)

summary(model)
confianza_intervalo <- confint(model, level = 0.95)
summary(confianza_intervalo)
```

El cambio estimado en el precio por cada metro cuadrado, con el 95% de confianza, estaría en un valor entre 0.5554 y 1.078 euros.

------------------------------------------------------------------------

24. Responde con su correspondiente margen de error del 95%, ¿cuantos euros incrementa el precio del alquiler por cada habitación?

```{r}
model <- lm(data=barrio_sol, formula= Precio ~ NumDormitorios)
summary(model)
confianza_intervalo <- confint(model, level = 0.95)
summary(confianza_intervalo)

```

```{r}
confianza_intervalo <- confint(model, level = 0.95)
summary(confianza_intervalo)
```

El cambio estimado en el precio para un aumento del número de habitaciones, con el 95% de confianza, se correspondería con un valor de entre 14.90 y 50.93 euros

------------------------------------------------------------------------

25. ¿Cual es la probabilidad de encontrar, en el barrio de Sol, un apartamento en alquiler con 3 dormitorios? ¿Cual es el intervalo de confianza de esa probabilidad?

```{r}
airbnb_sol <- subset(airbnb_entire, Barrio == "Sol")
total <- nrow(airbnb_sol)

apartamento_3hab <-subset(airbnb_entire, Barrio == "Sol" & TipoPropiedad == "Apartment" &  NumDormitorios == 3)

casos <- nrow(apartamento_3hab)

probabilidad <- casos / total
intervalo_confianza <- binom.test(casos, total)$conf.int

cat("Probabilidad de encontrar un apartamento en alquiler con 3 dormitorios en Sol es de:", probabilidad, "\n")
cat("Intervalo de confianza:", intervalo_confianza, "\n")


```

------------------------------------------------------------------------
